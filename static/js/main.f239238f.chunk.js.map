{"version":3,"sources":["classList.js","definition/AutocompleteDefinition.js","autocomplete-demo/Autocomplete.js","google-feud/google-feud.js","App.js","index.js"],"names":["classList","Definition","className","Autocomplete","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","suggestionsListComponent","this","class","map","index","key","type","Component","defaultProps","GoogleFeud","href","target","rel","App","ReactDOM","render","document","getElementById"],"mappings":"2LA0DeA,G,KA1DG,CAChB,OACA,SACA,SACA,SACA,OACA,OACA,SACA,QACA,YACA,UACA,QACA,QACA,WACA,QACA,QACA,OACA,SACA,OACA,SACA,UACA,OACA,SACA,QACA,UACA,OACA,OACA,SACA,QACA,MACA,SACA,QACA,OACA,SACA,QACA,WACA,OACA,OACA,OACA,SACA,OACA,UACA,QACA,QACA,SACA,SACA,QACA,SACA,UACA,QACA,UACA,MACA,UACA,QACA,OACA,WCrCaC,EAdI,kBACjB,yBAAKC,UAAU,cACb,+DACA,yBAAKA,UAAU,kBACb,iS,mCCHAC,E,YASJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,SAAW,SAAAC,GAAM,IACPC,EAAgB,EAAKH,MAArBG,YACFC,EAAYF,EAAEG,cAAcC,MAG5BC,EAAsBJ,EAAYK,QACtC,SAAAC,GAAU,OACRA,EAAWC,cAAcC,QAAQP,EAAUM,gBAAkB,KAKjE,EAAKE,SAAS,CACZC,iBAAkB,EAClBN,sBACAO,iBAAiB,EACjBV,UAAWF,EAAEG,cAAcC,SAhCZ,EAqCnBS,QAAU,SAAAb,GAER,EAAKU,SAAS,CACZC,iBAAkB,EAClBN,oBAAqB,GACrBO,iBAAiB,EACjBV,UAAWF,EAAEG,cAAcW,aA3CZ,EAgDnBC,UAAY,SAAAf,GAAM,IAAD,EACmC,EAAKgB,MAA/CL,EADO,EACPA,iBAAkBN,EADX,EACWA,oBAI1B,GAAkB,KAAdL,EAAEiB,QACJ,EAAKP,SAAS,CACZC,iBAAkB,EAClBC,iBAAiB,EACjBV,UAAWG,EAAoBM,UAI9B,GAAkB,KAAdX,EAAEiB,QAAgB,CACzB,GAAyB,IAArBN,EACF,OAGF,EAAKD,SAAS,CAAEC,iBAAkBA,EAAmB,SAGlD,GAAkB,KAAdX,EAAEiB,QAAgB,CACzB,GAAIN,EAAmB,IAAMN,EAAoBa,OAC/C,OAGF,EAAKR,SAAS,CAAEC,iBAAkBA,EAAmB,MAvEvD,EAAKK,MAAQ,CAEXL,iBAAkB,EAElBN,oBAAqB,GAErBO,iBAAiB,EAEjBV,UAAW,IAXI,E,sEA8ET,IAaJiB,EAXFpB,EASEqB,KATFrB,SACAc,EAQEO,KARFP,QACAE,EAOEK,KAPFL,UAJK,EAWHK,KANFJ,MACEL,EANG,EAMHA,iBACAN,EAPG,EAOHA,oBACAO,EARG,EAQHA,gBACAV,EATG,EASHA,UAmCJ,OA7BIU,GAAmBV,IAEnBiB,EADEd,EAAoBa,OAEpB,wBAAIG,MAAM,eACPhB,EAAoBiB,KAAI,SAACf,EAAYgB,GACpC,IAAI3B,EAOJ,OAJI2B,IAAUZ,IACZf,EAAY,qBAIZ,wBAAIA,UAAWA,EAAW4B,IAAKjB,EAAYM,QAASA,GACjDN,OAQT,yBAAKc,MAAM,kBACT,qEAON,yBAAKzB,UAAU,QACb,yBAAKA,UAAU,YACb,uDACA,2BACE6B,KAAK,OACL1B,SAAUA,EACVgB,UAAWA,EACXX,MAAOF,IAERiB,Q,GA7IgBO,aAArB7B,EAKG8B,aAAe,CACpB1B,YAAa,IA8IFJ,QCtIA+B,G,MAfI,kBACjB,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,mBACb,2CACA,uBACEiC,KAAK,6BACLC,OAAO,SACPC,IAAI,uBAHN,6BCUSC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAc/B,YAAaP,MCTjCuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f239238f.chunk.js","sourcesContent":["const classList = [\n  'Alex',\n  'Alissa',\n  'Andrea',\n  'Andrew',\n  'Anna',\n  'Asaf',\n  'Bethan',\n  'Brent',\n  'Charlotte',\n  'Chi-Chi',\n  'Colin',\n  'Corey',\n  'Darshana',\n  'Derek',\n  'Elena',\n  'Emma',\n  'Fatima',\n  'Joey',\n  'Hannah',\n  'Heather',\n  'Hira',\n  'Howard',\n  'James',\n  'Jasmine',\n  'Juan',\n  'Keil',\n  'Lauren',\n  'Lewis',\n  'Lou',\n  'Lynsey',\n  'Mehdi',\n  'Miko',\n  'Nathan',\n  'Negin',\n  'Nicholas',\n  'Nick',\n  'Nuno',\n  'Olga',\n  'Pierce',\n  'Reem',\n  'Russell',\n  'Sandy',\n  'Sarah',\n  'Sharon',\n  'Sherry',\n  'Steve',\n  'Steven',\n  'Suzette',\n  'Tarra',\n  'Tiffany',\n  'Tom',\n  'Vincent',\n  'Vipin',\n  'Wade',\n  'Yiying'\n];\n\nexport default classList;\n","import React from 'react';\n\nimport '../App.css';\n\nconst Definition = () => (\n  <div className='definition'>\n    <h1>React Autocomplete Presentation</h1>\n    <div className='definition-box'>\n      <p>\n        Autocomplete, or word completion, is a feature in which an application\n        predicts the rest of a word a user is typing. In graphical user\n        interfaces, users can typically press the tab key to accept a suggestion\n        or the down arrow key to accept one of several.\n      </p>\n    </div>\n  </div>\n);\n\nexport default Definition;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../App.css';\n\nclass Autocomplete extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array)\n  };\n\n  static defaultProps = {\n    suggestions: []\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: ''\n    };\n  }\n\n  // Event fired when the input value is changed\n  onChange = e => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const filteredSuggestions = suggestions.filter(\n      suggestion =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    // Update the user input and filtered suggestions, reset the active\n    // suggestion and make sure the suggestions are shown\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: e.currentTarget.value\n    });\n  };\n\n  // Event fired when the user clicks on a suggestion\n  onClick = e => {\n    // Update the user input and reset the rest of the state\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText\n    });\n  };\n\n  // Event fired when the user presses a key down\n  onKeyDown = e => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n\n    // User pressed the enter key, update the input and close the\n    // suggestions\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n    }\n    // User pressed the up arrow, decrement the index\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow, increment the index\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n          <ul class='suggestions'>\n            {filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n              // Flag the active suggestion with a class\n              if (index === activeSuggestion) {\n                className = 'suggestion-active';\n              }\n\n              return (\n                <li className={className} key={suggestion} onClick={onClick}>\n                  {suggestion}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div class='no-suggestions'>\n            <em>No suggestions, you're on your own!</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div className='demo'>\n        <div className='demo-box'>\n          <h1>React Autocomplete Demo</h1>\n          <input\n            type='text'\n            onChange={onChange}\n            onKeyDown={onKeyDown}\n            value={userInput}\n          />\n          {suggestionsListComponent}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Autocomplete;\n","import React from 'react';\n\nimport './google-feud.css';\n\nconst GoogleFeud = () => (\n  <div className='google-feud'>\n    <div className='google-feud-box'>\n      <h2>Google Feud</h2>\n      <a\n        href='http://www.googlefeud.com/'\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        LETS PLAY GOOGLE FEUD\n      </a>\n    </div>\n  </div>\n);\n\nexport default GoogleFeud;\n","import React from 'react';\nimport './App.css';\n\nimport classList from './classList';\nimport Definition from './definition/AutocompleteDefinition';\nimport Autocomplete from './autocomplete-demo/Autocomplete';\nimport GoogleFeud from './google-feud/google-feud';\n\nfunction App() {\n  return (\n    <div>\n      <Definition />\n      <GoogleFeud />\n      <Autocomplete suggestions={classList} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}